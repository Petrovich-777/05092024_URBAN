class Figure:
    def __init__(self, color:tuple, sides, sides_count=0, filled = True):
        if Figure.__is_valid_color(self, color) == True:
            self.__color = color
        self.__color = color
        self.sides_count = sides_count
        if Figure.__is_valid_sides(self, sides) == True:
            self.__sides = sides
        self.filled = filled

    def get_color(self):
        return self.__color

    def __is_valid_color(self, color):
            if len(color) == 3 and 0 < color[0] < 255 and 0 < color[1] < 255 and 0 < color[2] < 255:
                return True
            else:
                return False

    def set_color(self, r, g, b):
        color = (r, g, b)
        if Figure.__is_valid_color(self, color) == True:
            self.__color = color
            return self.__color

    def __is_valid_sides(self, sides):
         if type(sides) == list and len(sides) == self.sides_count:
             for i in sides:
                if type(i) == int and i > 0:
                    return True
         if type(sides) == int and sides > 0:
             self.__sides = [sides] * self.sides_count
             return self.__sides

    def __len__(self):
        p = 0
        if self.sides_count == 1:
            p = self.__sides[0]
            return p
        else:
            for i in self.__sides:
                p += i
        return p

    def set_sides(self, *new_sides):
        new_sides1 = list(new_sides)
        if self.sides_count == len(new_sides1):
            self.__sides = new_sides1
            return self.__sides
        else:
            return self.__sides


    def get_sides(self):
        return self.__sides

class Circle(Figure):

    def __init__(self, color, __sides, sides_count=1):
        super().__init__(color, __sides, sides_count)

    def get_radius(self):
        import math
        self.__radius = self._Figure__sides[0] / (2 * math.pi)
        return self.__radius

    def get_square(self):
        import math
        square = math.pi * self.__radius ** 2
        return square

class Triangle(Figure):

    def __init__(self, color:tuple, __sides:list, sides_count=3):
        super().__init__(color, __sides, sides_count)

    def get_square(self):
        import math
        p = Triangle.__len__() / 2
        a = self._Figure__sides[0]
        b = self._Figure__sides[1]
        c = self._Figure__sides[0]
        self.__square = math.sqrt(p * (p -a ) * (p - b) * (p - c))
        return self.__square

class Cube(Figure):

    def __init__(self, color, __sides, sides_count=12):
        super().__init__(color, __sides, sides_count)

    def get_volume(self):
        self.volume = self._Figure__sides[0] ** 3
        return self.volume


    #if __name__ == '__main__':

circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())



# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())


